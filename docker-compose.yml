version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ecommerce_db}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network

  backend:
    build:
      context: ./backend-ecommerce
      dockerfile: Dockerfile
      target: production
    container_name: ecommerce-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-ecommerce_db}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      DATABASE_SSL: false
      JWT_SECRET: ${JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      APP_KEYS: ${APP_KEYS}
    ports:
      - "1337:1337"
    depends_on:
      - postgres
    networks:
      - ecommerce-network
    volumes:
      - ./backend-ecommerce/public:/app/public
      - backend_uploads:/app/public/uploads

  frontend:
    build:
      context: ./frontend-ecommerce
      dockerfile: Dockerfile
      target: production
    container_name: ecommerce-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://backend:1337}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  backend_uploads:

networks:
  ecommerce-network:
    driver: bridge
